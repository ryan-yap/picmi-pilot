#!/usr/bin/env node

/**
 * Module dependencies.
 */
var cluster = require('cluster');
var redis = require('redis'),
    client = redis.createClient()

var proximity = require('geo-proximity').initialize(client)

if (cluster.isMaster) {

    // Count the machine's CPUs
    var cpuCount = require('os').cpus().length;

    // Create a worker for each CPU
    for (var i = 0; i < cpuCount; i += 1) {
        cluster.fork();
    }

// Code to run if we're in a worker process
} else {

  var app = require('../main');
  var debug = require('debug')('PicMi-Pilot:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '8081');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  var io = require("socket.io").listen(http)
  /* 
    The list of participants in our chatroom.
    The format of each participant will be:
    {
      uid: "user._id",
      longitude: <longitude coordinate>,
      latitude: <latitude coordinate>
    }
  */
  io.on("connection", function(socket){
    /*
      When a user changes his name, we are expecting an event called "nameChange" 
      and then we'll emit an event called "nameChanged" to all participants with
      the id and new name of the user who emitted the original message
    */
    socket.on("ping", function(data) {
      proximity.addLocation(data.latitude, data.longitude, data.uid, function(err, reply){
        if(err) console.error(err)
        else console.log(data.uid + "is at:"+ "lat(" + data.latitude + ") long("+data.longitude + ")")
      })
    });
  });
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

}